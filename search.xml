<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTTP中媒体类型-SpringBoot（1）</title>
      <link href="/2022/11/12/Hexo/"/>
      <url>/2022/11/12/Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常见媒体类型"><a href="#1-常见媒体类型" class="headerlink" title="1.常见媒体类型"></a>1.常见媒体类型</h1><p>在Http协议中,使用，用 Content- Type 来表示具体请求中的媒体类型信息。 PC 端网页常用的是 “text&#x2F;html” 格式，手机 APP 常用的是 JSON 格式。(1)常见的媒体格式如下<br>• text&#x2F;html : HTML 格式。<br>• text&#x2F;plain 纯文本格式。<br>• text&#x2F;xml: XML 格式。<br>• image&#x2F;gif: GIF 图片格式。<br>• image&#x2F;jpeg : JPG 图片格式<br>• image&#x2F;png: PNG 图片格式( 2 )以 application开头的媒体格式如下。<br>• application&#x2F;xhtml+xml: XHTML + XML 格式。<br>• application&#x2F;xm : XML 数据格式。<br>• application&#x2F;atom+xml: Atom XML 聚合格式。<br>• application&#x2F;json: JSON 数据格式<br>• application&#x2F;pdf: PDF 格式<br>• application&#x2F;msword: Word 文档格式。<br>• application&#x2F;octe -stream: 二进制流数据(常用于文件下载)。<br>• application&#x2F;x-www-form-urlencoded 表单数据编码方式， &lt;form encType&#x3D;” “ &gt;中默认的 encType，Form (表单)数据被默认编码为 key&#x2F;value 格式发送给服务器。<br>• multipart&#x2F;form-data: 如果在表单中进行文件上传，则需要使用该格式。</p><h1 id="2-举例"><a href="#2-举例" class="headerlink" title="2.举例"></a>2.举例</h1><p>下面是一个返回 JSON 格式的数据的例子。代码中可以省略 Produces 属性，因为已经使用了注解@RestController ，它的返回值就是 JSON 格式的数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class BookController &#123;</span><br><span class="line">    @RequestMapping(value = &quot;/get&quot;,method = RequestMethod.GET,produces = &quot;application/json&quot;)</span><br><span class="line">    public Book get()&#123;</span><br><span class="line">        Book book = new Book();</span><br><span class="line">        book.setUsername(&quot;拉行啊&quot;);</span><br><span class="line">        book.setPassword(&quot;123&quot;);</span><br><span class="line">        return book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问结果如下：<img src="https://img2022.cnblogs.com/blog/2926045/202207/2926045-20220712141632593-1456789034.png"></p><p>在以下例子中， Consumes 是消费者，用于指定获取消费者的数据类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/put&quot;,method = RequestMethod.POST,consumes = &quot;application/json&quot;)</span><br><span class="line">public String put(@RequestBody String name)&#123;</span><br><span class="line">    return name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://img2022.cnblogs.com/blog/2926045/202207/2926045-20220712141337700-1906748308.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/12/hello-world/"/>
      <url>/2022/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
